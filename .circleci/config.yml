# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.3-node-browsers
      - image: circleci/postgres:10-postgis
        environment:
          POSTGRES_USER: circle-ci
          POSTGRES_DB: circle_test

    working_directory: ~/repo

    environment:
      DB_CONNECTION: pgsql
      DB_HOST: localhost
      DB_PORT: 5432
      DB_DATABASE: circle_test
      DB_USERNAME: circle-ci
      APP_ENV: testing
      APP_DEBUG: false
      hideDefaultLocaleInURL : true

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # Using the RAM variation mitigates I/O contention
    # for database intensive operations.
    # - image: circleci/mysql:5.7-ram
    #
    # - image: redis:2.8.19

    steps:
      - checkout

      - run:
          name: Update OS
          command: sudo apt-get update
      - run:
          name: Install libraries
          command: |
            sudo apt-get install libzip-dev libwebp-dev libjpeg-dev libpng-dev libz-dev libxpm-dev libmcrypt-dev libpq-dev
            sudo pecl channel-update pecl.php.net
            sudo pecl install zip && sudo docker-php-ext-enable zip
            sudo -E docker-php-ext-install gd
            sudo -E docker-php-ext-install bcmath && sudo docker-php-ext-enable bcmath
            sudo -E docker-php-ext-install mcrypt && sudo docker-php-ext-enable mcrypt
            sudo -E docker-php-ext-install mbstring && sudo docker-php-ext-enable mbstring
            sudo -E docker-php-ext-install exif && sudo docker-php-ext-enable exif
            sudo docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql
            sudo -E docker-php-ext-install pdo pdo_pgsql pgsql && sudo docker-php-ext-enable pdo pdo_pgsql pgsql

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - run:
            name: Run migrations
            command: php artisan migrate:fresh --seed --env=testing
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      # run tests with phpunit or codecept
      - run: php artisan migrate:fresh --seed --env=testing
      - run: ./vendor/bin/phpunit